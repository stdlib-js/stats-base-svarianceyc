{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/svarianceyc.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = svarianceyc( 4, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction svarianceyc( N, correction, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn 0.0;\n\t}\n\tsum = x[ offsetX ];\n\tix = offsetX + strideX;\n\tS = 0.0;\n\tfor ( i = 2; i <= N; i++ ) {\n\t\tv = x[ ix ];\n\t\tsum = float64ToFloat32( sum+v );\n\t\td = float64ToFloat32( float64ToFloat32( i*v ) - sum );\n\t\tS = float64ToFloat32( S + float64ToFloat32( float64ToFloat32( float64ToFloat32( 1.0/(i*(i-1)) ) * d ) * d ) ); // eslint-disable-line max-len\n\t\tix += strideX;\n\t}\n\treturn float64ToFloat32( S/n );\n}\n\n\n// EXPORTS //\n\nexport default svarianceyc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657–65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = svarianceyc( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction svarianceyc( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default svarianceyc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport svarianceyc from './svarianceyc.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( svarianceyc, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default svarianceyc;\n"],"names":["svarianceyc","N","correction","x","strideX","offsetX","sum","ix","S","v","d","n","i","NaN","float64ToFloat32","ndarray","stride2offset","setReadOnly"],"mappings":";;sUAqDA,SAASA,EAAaC,EAAGC,EAAYC,EAAGC,EAASC,GAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIV,EAAIC,EACHD,GAAK,GAAKU,GAAK,EACnB,OAAOE,IAER,GAAW,IAANZ,GAAuB,IAAZG,EACf,OAAO,EAKR,IAHAE,EAAMH,EAAGE,GACTE,EAAKF,EAAUD,EACfI,EAAI,EACEI,EAAI,EAAGA,GAAKX,EAAGW,IACpBH,EAAIN,EAAGI,GACPD,EAAMQ,EAAkBR,EAAIG,GAC5BC,EAAII,EAAkBA,EAAkBF,EAAEH,GAAMH,GAChDE,EAAIM,EAAkBN,EAAIM,EAAkBA,EAAkBA,EAAkB,GAAKF,GAAGA,EAAE,KAAQF,GAAMA,IACxGH,GAAMH,EAEP,OAAOU,EAAkBN,EAAEG,EAC5B,CC3BA,SAASX,EAAaC,EAAGC,EAAYC,EAAGC,GACvC,OAAOW,EAASd,EAAGC,EAAYC,EAAGC,EAASY,EAAef,EAAGG,GAC9D,CC1BAa,EAAAjB,EAAA,UAAAe"}